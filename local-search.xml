<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nextcloud优化</title>
    <link href="/2020/03/03/nextcloud%E4%BC%98%E5%8C%96/"/>
    <url>/2020/03/03/nextcloud%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>由于nextcloud提示了一些优化信息，这里进行优化。</p><h4 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h4><p>之前限制php-fpm的内存大小为512MB，需要进行更改，在<code>*php-fpm文件夹*/pool.d/www.conf</code>中设置<code>php_admin_value[memory_limit] = 2048M</code>即可。</p><h4 id="getenv-“PATH”-为空"><a href="#getenv-“PATH”-为空" class="headerlink" title="getenv(“PATH”)为空"></a>getenv(“PATH”)为空</h4><p>在前面提到的配置文件中将下面部分取消注释：</p><pre><code>env[HOSTNAME] = $HOSTNAMEenv[PATH] = /usr/local/bin:/usr/bin:/binenv[TMP] = /tmpenv[TMPDIR] = /tmpenv[TEMP] = /tmp</code></pre><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><ul><li><p>HTTP 请求头 “X-Frame-Options” 没有配置为 “SAMEORIGIN”<br>在nginx的配置文件中</p></li><li><p>HTTP的请求头 “Strict-Transport-Security” 未设置为至少 “15552000” 秒</p></li></ul><p>在nginx的配置文件中设置：</p><pre><code>add_header X-Frame-Options &quot;SAMEORIGIN&quot;;add_header Strict-Transport-Security &quot;max-age=31536000&quot;; includeSubDomains&quot; always;</code></pre><p>重启服务即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vsftpd使用</title>
    <link href="/2020/02/24/vsftpd%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/02/24/vsftpd%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="vsftpd的使用"><a href="#vsftpd的使用" class="headerlink" title="vsftpd的使用"></a>vsftpd的使用</h1><p><a href="https://www.jianshu.com/p/1a8a4593958a" target="_blank" rel="noopener">参考文档</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>键入命令：<code>sudo apt-get install vsfptd</code></p><p>为了能够正常使用<code>ftp_TLS</code>，需要在<code>/etc/vsftpd.conf</code>中添加：</p><pre><code># 开启 ssl 并指定使用的协议ssl_enable=YESssl_tlsv1=YESssl_sslv2=NOssl_sslv3=NO# 指定证书和 key 文件rsa_cert_file=/*自己的目录*/*证书*.crtrsa_private_key_file=/*自己的目录*/*证书*.key# 安全选项allow_anon_ssl=NOforce_local_data_ssl=YESforce_local_logins_ssl=YESrequire_ssl_reuse=NOssl_ciphers=HIGH# 指定主动模式时使用的端口范围pasv_min_port=*自己设置端口*pasv_max_port=*自己设置端口*</code></pre><p>重启vsftpd服务即可。</p><h2 id="设置账户"><a href="#设置账户" class="headerlink" title="设置账户"></a>设置账户</h2><p><a href="https://www.cnblogs.com/lantor/p/7600247.html" target="_blank" rel="noopener">参考文档</a></p><p>需要添加账户，并指定主目录：<code>sudo useradd -d /*自己设置目录*/ -s /usr/sbin/nologin *用户名*</code>。之后设置密码：<code>passwd *用户名*</code></p><p>之后通过<code>chown *用户名*:*用户名* *目录*</code>设置文件夹权限。</p><p>下面完成两方面的设置：</p><ul><li>只允许特定用户登陆</li><li>只允许读写主目录</li></ul><pre><code>userlist_enable=YESuserlist_deny=NOuserlist_file=/etc/vsftpd/user_listchroot_local_user=YESchroot_list_enable=YESchroot_list_file=/etc/vsftpd/chroot_listallow_writeable_chroot=YES</code></pre><p>其中，<code>chroot_list</code>中的用户可以访问主目录外的其他目录。</p><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><p>如果出现乱码问题，可以通过将文件系统字符集设置为<code>utf-8</code>解决。在<code>/etc/vsftpd.conf</code>中设置：<code>utf8_filesystem=YES</code>。在filezila中[站点]中的[字符集]强制使用<code>utf-8</code>编码即可。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>ftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置nextcloud私有云盘服务</title>
    <link href="/2020/02/24/%E9%85%8D%E7%BD%AEnextcloud%E7%A7%81%E6%9C%89%E4%BA%91%E7%9B%98%E6%9C%8D%E5%8A%A1/"/>
    <url>/2020/02/24/%E9%85%8D%E7%BD%AEnextcloud%E7%A7%81%E6%9C%89%E4%BA%91%E7%9B%98%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/843af0af176e" target="_blank" rel="noopener">参考文档1</a> <a href="https://blog.csdn.net/qq_35709559/article/details/89516063" target="_blank" rel="noopener">参考文档2</a></p><p>首先需要安装nginx服务：<code>sudo apt-get install nginx -y</code>。如果之前已经安装过不需要再次安装。</p><h2 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h2><p>这里使用php7.2，键入如下命令安装php以及相关依赖包：</p><pre><code>sudo apt-get install php7.2sudo apt-get install php-zipsudo apt-get install php-dompdfsudo apt-get install php-xmlsudo apt-get install php-mbstringsudo apt-get install php-curlsudo apt-get install php-mysql</code></pre><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>安装mysql：<code>sudo apt-get install -y mysql-server</code></p><p>输入<code>mysql -uroot -p</code>，如果出现如下错误：</p><pre><code>ERROR 1698 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39;</code></pre><p>这是因为第一次使用，未设置密码。需要键入<code>sudo systemctl stop mysql</code>停止mysql的运行。</p><p>键入命令：<code>sudo mysql_secure_installation</code>，进行管理员账户信息设置，并设置数据库的权限，按照自己需求设置即可。</p><p>键入命令<code>sudo systemctl start mysql</code>启动mysql。</p><p>如果前面设置了root用户远程登陆而之后需要取消，可以参考<a href="https://www.jianshu.com/p/3eb0bcf1448d" target="_blank" rel="noopener">这篇文档</a>。</p><p>正常进入mysql，键入命令：</p><pre><code>create database nextcloud;  # 新建show databases;             # 查看</code></pre><p>新建数据库用户：</p><pre><code>create user *用户名*@localhost identified by &#39;*密码*&#39;;</code></pre><p>限制数据库只可以本地访问并刷新：</p><pre><code>grant all privileges on nextcloud.* to *用户名*@localhost identified by &#39;*密码*&#39;;flush privileges;</code></pre><h2 id="安装nextcloud"><a href="#安装nextcloud" class="headerlink" title="安装nextcloud"></a>安装nextcloud</h2><h2 id="设置nginx"><a href="#设置nginx" class="headerlink" title="设置nginx"></a>设置nginx</h2><p>进入<code>/etc/nginx/sites-available/</code>，创建文件cloud：<code>touch cloud</code>。之后在路径<code>/etc/nginx/sites-enabled/</code>中，加入软链接：<code>ln -s ../sites-available/cloud cloud</code>。</p><p>编辑<code>/etc/nginx/sites-available/cloud</code>（参见<a href="https://docs.nextcloud.com/server/12/admin_manual/installation/nginx.html" target="_blank" rel="noopener">官方配置</a>）：</p><pre><code>upstream php-handler {    server 127.0.0.1:9000;    #server unix:/var/run/php/php7.0-fpm.sock;}server {    listen 80;    listen [::]:80;    server_name disk.chensh236.com;    # enforce https    return 301 https://$server_name$request_uri;}server {    listen 443 ssl http2;    listen [::]:443 ssl http2;    server_name disk.chensh236.com;    ssl_certificate /*保存的目录*/*名字*.crt;    ssl_certificate_key /*保存的目录*/*名字*.key;    # Add headers to serve security related headers    # Before enabling Strict-Transport-Security headers please read into this    # topic first.    # add_header Strict-Transport-Security &quot;max-age=15768000;    # includeSubDomains; preload;&quot;;    #    # WARNING: Only add the preload option once you read about    # the consequences in https://hstspreload.org/. This option    # will add the domain to a hardcoded list that is shipped    # in all major browsers and getting removed from this list    # could take several months.    add_header X-Content-Type-Options nosniff;    add_header X-XSS-Protection &quot;1; mode=block&quot;;    add_header X-Robots-Tag none;    add_header X-Download-Options noopen;    add_header X-Permitted-Cross-Domain-Policies none;    # Path to the root of your installation    root /*自己设置目录*/;    location = /robots.txt {        allow all;        log_not_found off;        access_log off;    }    # The following 2 rules are only needed for the user_webfinger app.    # Uncomment it if you&#39;re planning to use this app.    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json    # last;    location = /.well-known/carddav {      return 301 $scheme://$host/remote.php/dav;    }    location = /.well-known/caldav {      return 301 $scheme://$host/remote.php/dav;    }    # set max upload size    client_max_body_size 512M;    fastcgi_buffers 64 4K;    # Enable gzip but do not remove ETag headers    gzip on;    gzip_vary on;    gzip_comp_level 4;    gzip_min_length 256;    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;    # Uncomment if your server is build with the ngx_pagespeed module    # This module is currently not supported.    #pagespeed off;    location / {        rewrite ^ /index.php$request_uri;    }    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {        deny all;    }    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {        deny all;    }    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+)\.php(?:$|/) {        fastcgi_split_path_info ^(.+?\.php)(/.*)$;        include fastcgi_params;        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        fastcgi_param PATH_INFO $fastcgi_path_info;        fastcgi_param HTTPS on;        #Avoid sending the security headers twice        fastcgi_param modHeadersAvailable true;        fastcgi_param front_controller_active true;        fastcgi_pass php-handler;        fastcgi_intercept_errors on;        fastcgi_request_buffering off;    }    location ~ ^/(?:updater|ocs-provider)(?:$|/) {        try_files $uri/ =404;        index index.php;    }    # Adding the cache control header for js and css files    # Make sure it is BELOW the PHP block    location ~ \.(?:css|js|woff|svg|gif)$ {        try_files $uri /index.php$request_uri;        add_header Cache-Control &quot;public, max-age=15778463&quot;;        # Add headers to serve security related headers (It is intended to        # have those duplicated to the ones above)        # Before enabling Strict-Transport-Security headers please read into        # this topic first.        # add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;        #        # WARNING: Only add the preload option once you read about        # the consequences in https://hstspreload.org/. This option        # will add the domain to a hardcoded list that is shipped        # in all major browsers and getting removed from this list        # could take several months.        add_header X-Content-Type-Options nosniff;        add_header X-XSS-Protection &quot;1; mode=block&quot;;        add_header X-Robots-Tag none;        add_header X-Download-Options noopen;        add_header X-Permitted-Cross-Domain-Policies none;        # Optional: Don&#39;t log access to assets        access_log off;    }    location ~ \.(?:png|html|ttf|ico|jpg|jpeg)$ {        try_files $uri /index.php$request_uri;        # Optional: Don&#39;t log access to other assets        access_log off;    }}</code></pre><h2 id="nextcloud安装"><a href="#nextcloud安装" class="headerlink" title="nextcloud安装"></a>nextcloud安装</h2><p>在nextcloud<a href="https://nextcloud.com" target="_blank" rel="noopener">官网</a>查找服务端版本下载，尝试18.0.1出现了无法找到<code>File.php</code>的错误，所以选择17.0.3版本。如果下载过慢可以通过以下<a href="https://disk.chensh236.com/s/aJeyCDX5YKz8SsR" target="_blank" rel="noopener">链接</a>下载。将安装包上传到服务器上，并解压到对应目录即可。</p><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>为了让nginx正常进行反向代理，需要让nginx的用户www-data有权限读写nextcloud文件夹中的文件。进入nextcloud对应的文件夹的父目录，键入命令：</p><pre><code>chown -R www-data:www-data nextcloud/chmod -R 755 nextcloud</code></pre><h3 id="9000端口没有监听问题："><a href="#9000端口没有监听问题：" class="headerlink" title="9000端口没有监听问题："></a>9000端口没有监听问题：</h3><p>将<code>cloud</code>文件中的<code>server 127.0.0.1:9000;</code>改为<code>server unix:/var/run/php/php7.2-fpm.sock;</code></p><h2 id="ACPu加速"><a href="#ACPu加速" class="headerlink" title="ACPu加速"></a>ACPu加速</h2><p>安装：<code>sudo apt-get install php-apcu -y</code></p><p>在nextcloud路径下的<code>config/config.php</code>中添加：</p><pre><code>&#39;memcache.local&#39; =&gt; &#39;\OC\Memcache\APCu&#39;,</code></pre><p>重启php7.2-fpm服务：<code>sudo systemctl reload php7.2-fpm.service</code>以及nginx：<code>sudo systemctl restart nginx</code>。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nextcloud</tag>
      
      <tag>维护</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo建站教程（初级）3——添加管理界面与评论</title>
    <link href="/2020/02/22/hexo%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%893%E2%80%94%E2%80%94%E6%B7%BB%E5%8A%A0%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2/"/>
    <url>/2020/02/22/hexo%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%893%E2%80%94%E2%80%94%E6%B7%BB%E5%8A%A0%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="添加admin-hexo界面"><a href="#添加admin-hexo界面" class="headerlink" title="添加admin-hexo界面"></a>添加admin-hexo界面</h1><p><a href="https://jaredforsyth.com/hexo-admin/" target="_blank" rel="noopener">官网</a> <a href="https://albenw.github.io/posts/4ffa5bc6/" target="_blank" rel="noopener">参考文档1</a> <a href="https://blog.csdn.net/RenZouChaLiangrz/article/details/87890621" target="_blank" rel="noopener">参考文档2</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装admin-hexo之前需要安装一些依赖，避免错误发生。键入命令：</p><pre><code>npm install minimatch@&quot;3.0.2&quot;  npm update -d</code></pre><p>可以完成依赖的安装。之后键入命令<code>npm install --save hexo-admin</code>可以完成插件的安装。<br>执行<code>hexo s</code>命令，在<code>localhost:4000/admin</code>可以查看。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="密码设置"><a href="#密码设置" class="headerlink" title="密码设置"></a>密码设置</h3><p>在<code>Setting</code>界面，点击<code>Setup authentification here</code>，创建用户名和密码，按照提示在blog根目录中的<code>_config.yml</code>中添加该界面下方的设置。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>在blog根目录下，新建文件夹，进入后新建脚本<code>d.sh</code>，加入命令<br><code>hexo clean &amp; hexo g -d</code>，之后通过命令<code>chmod +x d.sh</code>设置权限。<br>最后一步在blog根目录下的<code>_config.yml</code>的<code>admin</code>部分添加：</p><pre><code>admin:  username: ...  password_hash: ...  secret: ...  deployCommand: ./*新建的文件夹名*/d.sh</code></pre><h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><p>这部分比较简单，我是用的是valine。<a href="https://www.jianshu.com/p/728a9594bb6c" target="_blank" rel="noopener">参考文档</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站搭建</tag>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo建站教程（初级）2 —— 百度和google的收录</title>
    <link href="/2020/02/22/hexo%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B2/"/>
    <url>/2020/02/22/hexo%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B2/</url>
    
    <content type="html"><![CDATA[<p>之前主要讲述了hexo的基础建站过程。即使站点搭的很漂亮，文章写的很漂亮，但因为没有google和百度的抓取，这些文章依然很难被别人看到。<br>下面主要讲述百度和google的站点地图提交和主动推送，以便百度和google收录和蜘蛛爬取。</p><h2 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h2><p><a href="https://zhuanlan.zhihu.com/p/100922816" target="_blank" rel="noopener">参考文档</a><br>在<a href="https://ziyuan.baidu.com" target="_blank" rel="noopener">百度搜索资源平台</a>，可以添加自己的网站，需要选择http或者https协议。这里使用的是https协议。在此之后还需要进行验证。可以选择比较方便的DNS验证。</p><h3 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h3><p>在blog的目录输入命令：<code>npm install hexo-baidu-url-submit --save</code>，在该目录的<code>_config.yml</code>文件中写入：</p><pre><code>baidu_url_submit:  count: 1                              # 提交最新的多少个链接  host: *自己的域名*                      # 在百度站长平台中添加的域名  token: *在百度搜索资源平台中获得的token*   # 秘钥  path: baidu_urls.txt                   # 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>之后需要检查url是否与百度验证的域名一致：</p><pre><code># URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: *自己的域名*</code></pre><p>检查完成，添加deployer：</p><pre><code>deploy:- type: git  repo:     github: ...    local:  ...  branch: master- type: baidu_url_submitter</code></pre><p>之后运行<code>hexo clean &amp; hexo g -d</code>查看能否正常推送。</p><h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>键入命令<code>npm install hexo-generator-baidu-sitemap --save</code>，安装对应的包。<br>在blog根目录中的<code>_config.yml</code>中加入</p><pre><code>baidusitemap:  path: baidusitemap.xml</code></pre><p>重新执行<code>hexo clean &amp; hexo g -d</code>就可以在<code>public</code>文件夹中看到对应的<code>baidusitemap.xml</code>文件。这说明站点地图建立成功。<br>将<code>https://*自己的域名*/baidusite.xml</code>提交到百度即可。</p><h2 id="google"><a href="#google" class="headerlink" title="google"></a>google</h2><p>google只使用站点地图提交，键入命令<code>npm install hexo-generator-sitemap --save</code>，安装对应的包。<br>在blog根目录中的<code>_config.yml</code>中加入</p><pre><code>sitemap:  path: sitemap.xml</code></pre><p>重新执行<code>hexo clean &amp; hexo g -d</code>，可以看到在<code>public</code>文件夹中有对应的<code>sitemap.xml</code>文件。<br>在google的<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">站长平台</a>进行验证，提交站点地图即可，可以选用DNS验证比较方便。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站搭建</tag>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo建站过程(初级)</title>
    <link href="/2020/02/21/hexo%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B-%E5%88%9D%E7%BA%A7/"/>
    <url>/2020/02/21/hexo%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B-%E5%88%9D%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-建站过程"><a href="#hexo-建站过程" class="headerlink" title="hexo 建站过程"></a>hexo 建站过程</h1><h2 id="初级：搭建hexo并部署本地服务器以及github"><a href="#初级：搭建hexo并部署本地服务器以及github" class="headerlink" title="初级：搭建hexo并部署本地服务器以及github"></a>初级：搭建hexo并部署本地服务器以及github</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo文档</a><br>hexo框架相关文档如上，相关介绍也都在上面，这里不再赘述。我主要阐述我自己部署hexo的过程，以供参考。由于懒得每次写作都需要进行一次部署，所以想要将hexo搭建在腾讯云服务器上，并且部署在本地的服务器以及github上。</p><pre><code>运行环境：本地: Mac OS / Window 10cvm: ubuntu</code></pre><h3 id="公钥免密登陆"><a href="#公钥免密登陆" class="headerlink" title="公钥免密登陆"></a>公钥免密登陆</h3><p>本地电脑生成公钥和私钥，将公钥上传到cvm上，本地使用私钥，可以实现免密登陆ssh。关于ssh使用的基于非对称加密算法的<code>rsa</code>算法，可以查看<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem" target="_blank" rel="noopener">wiki百科</a>)的介绍。</p><h4 id="本地电脑配置"><a href="#本地电脑配置" class="headerlink" title="本地电脑配置"></a>本地电脑配置</h4><p>使用命令：<code>ssh-keygen -t rsa</code>，一路回车即可生成一对公钥和私钥。公钥默认名为<code>id_rsa.pub</code>，私钥为<code>id_rsa</code>。存储位置如下：</p><ul><li>Windows：<code>C:\Users\*用户名*\.ssh\</code></li><li>Ubuntu / Mac OS：<code>~\.ssh</code></li></ul><h4 id="cvm配置"><a href="#cvm配置" class="headerlink" title="cvm配置"></a>cvm配置</h4><p>可以直接打开<code>id_rsa.pub</code>，复制内容或者通过SFTP上传到cvm上。cvm进行如下设置：</p><ul><li>确保连接成功，需要更改文件权限：</li></ul><pre><code>chmod 600 authorized_keys # 在~/.ssh/目录中执行chmod 700 ~/.ssh # 在~/目录中执行</code></pre><ul><li>写入公钥：</li></ul><pre><code>cat *公钥路径*/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></pre><ul><li>更改服务器配置，确保能够通过密钥登陆：</li></ul><p>修改配置文件：<code>sudo vim /etc/ssh/sshd_config</code>，添加（修改）如下参数：</p><pre><code>RSAAuthentication yesPubkeyAuthentication yesPermitRootLogin yes</code></pre><ul><li><p>可选择禁用密码登录：<code>PasswordAuthentication no</code></p></li><li><p>重启ssh服务：<code>service sshd restart</code></p></li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>验证是否能直接通过私钥登陆ssh：<code>ssh -i *密钥所在路径* *用户名*@*服务器地址*</code></p><h3 id="基础安装"><a href="#基础安装" class="headerlink" title="基础安装"></a>基础安装</h3><p><a href="https://www.jianshu.com/p/9c1d3dcd8c99" target="_blank" rel="noopener">参考文档1</a> <a href="https://segmentfault.com/a/1190000009723457" target="_blank" rel="noopener">参考文档2</a></p><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>在ubuntu下，输入命令<code>sudo apt-get install git-core</code>。</p><p>之后需要设置用户名以及邮箱。这里使用全局设置。</p><pre><code>git config --global user.name &quot;*用户名*&quot;git config --global user.email &quot;*邮箱*&quot;</code></pre><h4 id="安装node-js以及hexo"><a href="#安装node-js以及hexo" class="headerlink" title="安装node.js以及hexo"></a>安装node.js以及hexo</h4><ul><li>在ubuntu下安装node.js：</li></ul><pre><code>curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -sudo apt-get install -y nodejs</code></pre><ul><li>安装hexo：<code>npm install -g hexo-cli</code></li><li>如果出现<strong>EACCES</strong>错误，修改配置文件即可。<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">参考连接</a><pre><code>mkdir ~/.npm-globalnpm config set prefix &#39;~/.npm-global&#39;export PATH=~/.npm-global/bin:$PATHsource ~/.profile#　测试sudo npm install -g jshint</code></pre>如果<code>npm</code>无法正常下载包，可以使用淘宝的源，输入命令：</li></ul><pre><code>npm install -g *cnpm*--registry=https://registry.npm.taobao.org</code></pre><p>之后使用<code>cnpm</code>代替<code>npm</code>即可。</p><ul><li>安装建站需要的其他包：</li></ul><pre><code>npm install -g hexo-servernpm install -g hexo-deployer-gitnpm install -g hexo-util</code></pre><h4 id="创建本地博客文件夹"><a href="#创建本地博客文件夹" class="headerlink" title="创建本地博客文件夹"></a>创建本地博客文件夹</h4><p>因为我在cvm使用了第二块数据盘，需要<code>sudo</code>权限才能够进行更改。故新建<code>blog</code>文件夹之后修改文件夹权限。</p><pre><code>sudo chown -R $USER:$USER blogsudo chmod -R 755 blog</code></pre><p>进入文件夹，初始化hexo：<code>hexo init .</code> 如果没有将hexo所在路径添加到环境变量中，需要使用<code>npx hexo init .</code></p><p>之后输入<code>hexo s</code>可以启动项目，在本地<code>localhost:4000</code>可以查看。</p><h4 id="将hexo部署到github上"><a href="#将hexo部署到github上" class="headerlink" title="将hexo部署到github上"></a>将hexo部署到github上</h4><p>在github上添加一个<code>repository</code>，名字<strong>必须</strong>是<code>*github用户名*.github.io</code>，否则会出现错误。复制远程git地址。</p><p>在博客所在文件夹中，编辑<code>_config.yml</code>，在文本最后的部署部分更改为：</p><pre><code>deploy:    type: git    repo:        github: *远程git地址*    branch: master</code></pre><p>保存后执行<code>hexo g -d</code>可以生成并部署，或者<code>hexo generate</code>之后<code>hexo deploy</code>亦可。</p><p>在部署过程中，需要输入用户名以及密码。如果以后懒得输入，可以使用如下命令，下次输入后不用再输入：</p><pre><code>git config --global credential.helper store</code></pre><h4 id="将hexo部署到本地"><a href="#将hexo部署到本地" class="headerlink" title="将hexo部署到本地"></a>将hexo部署到本地</h4><p>这里使用git将hexo部署到本地。首先需要创建文件夹，如果出现权限问题，可以参照前面的方法设置文件夹的权限。之后进入文件夹，创建裸仓：</p><pre><code>git init --bare hexo.gitchown -R $User:$User hexo.git</code></pre><p>进入<code>hexo.git</code>文件夹，找到<code>hooks</code>目录并进入，通过如下命令将<code>post-update.sample</code>文件改名为<code>post-update.sample</code>：</p><pre><code>mv post-update.sample post-update</code></pre><p>之后编辑该文件，在顶部加入：</p><pre><code>git --work-tree=*文件夹路径* --git-dir=*文件夹路径*/hexo.git checkout -f</code></pre><p>修改该文件权限：</p><pre><code>chmod +x post-update</code></pre><p>在博客文件夹中，修改<code>_config.yml</code>，将<code>deploy</code>部分改为：</p><pre><code>deploy:    type: git    repo:        github: *远程git地址*        repo: *文件夹路径*/hexo.git    branch: master</code></pre><h5 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h5><p>nginx的<a href="https://blog.csdn.net/weixin_42167759/article/details/85049546" target="_blank" rel="noopener">配置文件解析</a></p><p>由于使用了https，所以nginx需要监听80端口，将http链接跳转为https链接。通过nginx配置https链接可以参考<a href="https://juejin.im/post/5c0144036fb9a04a102f046a" target="_blank" rel="noopener">nginx配置ssl实现https访问</a>，非常简单所以不再赘述。与基础配置不同的是需要添加<code>root</code>指向前面提到的hexo部署到本地的文件夹（下面有提示） ，并且添加<code>include mime.types;</code>确保<code>css</code>文件能够被浏览器正常识别。</p><ul><li>安装：<code>apt-get install nginx</code></li><li><p>查看位置/检查配置：<code>nginx -t</code></p></li><li><p>更改配置</p></li></ul><pre><code>user www-data;worker_processes auto;pid /run/nginx.pid;include /etc/nginx/modules-enabled/*.conf;events { worker_connections 768; # multi_accept on;}http { ## # Basic Settings ##include mime.types; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; # gzip_proxied any; # gzip_comp_level 6; # gzip_buffers 16 8k; # gzip_http_version 1.1; # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; server {      listen 443 ssl;      server_name *域名*;      ssl on;      ssl_certificate /*证书所在文件夹*/*证书*;      ssl_certificate_key /*密钥所在文件夹*/*密钥*;    root *hexo部署到本地的文件夹*;  location / {    index  index.html;  } } server {  listen 80;  server_name *域名*;  return 301 https://blog.chensh236.com$request_uri; }}</code></pre><ul><li>执行<code>nginx -t</code>与<code>nginx -s reload</code>（可能需要sudo）</li></ul><p>如若出现：</p><pre><code>nginx: [warn] the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /usr/local/nginx/conf/nginx.conf:2</code></pre><p>需要解决权限占用问题：</p><pre><code>chown root.root nginxchmod 755 nginxchmod u+s nginx</code></pre><h5 id="重装nginx"><a href="#重装nginx" class="headerlink" title="重装nginx"></a>重装nginx</h5><p>如果nginx出现问题需要重装，其配置文件依旧存在，可以通过如下方法完全清除nginx相关的依赖、配置文件。</p><ul><li>卸载nginx不保留配置文件：<code>sudo apt-get --purge remove nginx</code></li><li>卸载不需要的依赖包：<code>sudo apt-get autoremove</code></li><li>筛选已经安装包中与nginx有关的：<code>dpkg --get-selections | grep nginx</code></li><li>卸载所有有关的：<code>sudo apt-get --purge remove *和nginx相关的安装包*</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站搭建</tag>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
